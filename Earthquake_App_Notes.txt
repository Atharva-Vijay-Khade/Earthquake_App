
Earthquake App in flutter 

1] Setup google maps 
    - got to pub.dev and take google maps flutter package
    - install by setting up the dependencies in pubspec.yaml
    - to to google cloud platform for maps and go to console 
    - select google maps sdk for android 
    - click on enable 
    - go to credentials and create create credentials
    - get the api key
    - go to package docs and set up the andoid manifest 
    - set up the metadata for the package and paste the api key
    - this is the setup for android 
    - for ios, setup the AppDelegate.swift file by code given in doc
    - paste the api key there
    - key terms
                - meta data -> data that give info on other data
                - androidManifest file: heart of flutter application
                  it glues multiple things in app together to work
    
----- AndroidX error : androidX is used to solved the problem of backward
compatibility, meaning if our app is using new features which older android 
versions may not support, then the app might crash, to solve this issue AndroidX
is used, this is common error in android development
----- '_' preceded varibales in flutter are private variables 

// Creating the usable Earthquake widget

class Earthquake extends StatefulWidget {
  @override
  _EarthquakeState createState() => _EarthquakeState();
}

class _EarthquakeState extends State<Earthquake> {

  GoogleMapController googleMapController;   // this has the controller to the map widget 

  final LatLng _center = const LatLng(45.521563, -122.677433);  // LatLng object to setup initial camera position

  void _onMapCreated(GoogleMapController controller) { // function to setup the map controller
    googleMapController = controller;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Earthquake"),
      ),
      body: GoogleMap(          // this widget creates the google map widget 
        onMapCreated: _onMapCreated,     // this calls the onmapcreate function and passes the controller which is then setup
        initialCameraPosition: CameraPosition(target: _center,zoom: 11.0), // setting the initial camera position
      ),
    );
  }
}

----- imp on androidX error if faced
      - go to the link mentioned in the error
      - open the android folder of the app you are currently working on [open in android studio]
      - syn the files if error then sync with file menue
      - follow suggestions given by the studio if error occur
      - then migrate the app 
      - then if still error then take scripts as shown in lectures [ copy past the error on google and github refer to the github link]
      - manage the versions [they might have changed]
      - save the scripts in the build.gradle follow others steps in the github post 
      - IMP = how to check if our emulator has google play services or not ? 
            -  open AVD manager and which ever emulator has the google play symbol indicate it has the google 
               play services in it
      - if we want the emulator with the google services in it then create a new emulator which has that support
- Some times if the app doesn't work on ide then rebuild the application 
  -- try commands like flutter clear flutter build etc
   
2] Map features 
- mapType: MapType.[type]  by this we can select the map type that we want, terrain, satellite, hybrid etc
- now to add a marker on the location which we want, we use the marker: property which takes a set of marker 
as the value ie: marker:{ portland, , , , , } Marker portland created below 

= Marker portlandMarker = Marker(
    markerId: MarkerId("Portland"),   // this is just an id for the marker 
    position: place the LatLng object here, // this is the location of the marker 
    infoWindow: infoWindow(title:"Portland",snippet: Additional text shown here!),  // this is the information[will be shown:when taped on marker] about the marker
    icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.[which ever we want]); // this is icon shown on marker
);

- to get lat lang coordinates we can go to google maps and just check the url of that location

About GoogleMapController
- Controller for a single GoogleMap instance running on the host platform.
- when we have to create a new contorller mainly to animate and move the camera position 
around the map then we have to use await and async function to initialize the new 
googleMapController controller with the controller which was assigned when the map was 
created 

syntax : 
// its a function which returns nothing in future
Future<void> _gotoLoc() async {
  GoogleMapController contorller = await MapContoroller;
  contorller.animateCamera(CameraUpdate.newCameraPosition(newloc));  // this newloc is the object of type CameraPosition initialized using CameraPosition constructor
}
//CameraPosition newloc = CameraPosition(lat,lang)
= we call the above function whene we want to shift to the location, call it on the onpressed property

// we can also remove the async and await, still it works :)
 void _gotoIntel()  {
  GoogleMapController controller = googleMapController;
  controller.animateCamera(CameraUpdate.newCameraPosition(intelLoc));
}  !!!!! Doubt on this ,this is happening?????

// inside CameraPosition constructor we can also pass the tilt and the bearing property 
so that during animations the bearing will rotate the view and tilt will lower the angel of view



---------------------------------------------------------------------------------------

Starting with the App

1] https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.geojson 
api link to fetch the earth quake data
2] In the chrome extension, download json viewer pro to view the json files more clearly
3] now we conver the the json object to dart object, which is usable class, called as PODO
plain old dart object  link for it -> https://javiercbk.github.io/json_to_dart/
4] whenever we convert the jason to dart object class then some types in the json 
are not known, or ambigious to dart , that we need to resolve, so use a helper function to 
resolve, ie field: 10   type of this 10 is not konwn so it's ambigious, 
        ie  field: null null type is not known, so we use helper function here
5] This helper class is also useful in other situations when we are using the json to dart 
when we want we use this helper class to avoid ambigious datatypes in the application

Setting Up the network class 

import 'dart:convert';


import 'package:earthquake_app/Model/model.dart';
import 'package:http/http.dart' as https;

class Network {

  static Future<Quakes> getQuakes() async {

    var quakeUrl = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.geojson";

    var response = await https.get(Uri.https("earthquake.usgs.gov","earthquakes/feed/v1.0/summary/2.5_day.geojson"));

    if(response.statusCode == 200)
    {
      print(response.body);
      return Quakes.fromJson(json.decode(response.body));
    }
    else{
      throw Exception("error occurred");
    }
  }
}

we calls this static method inside the init state method, and assigne them to the future object 
as shown below 

Future<Quakes> _earthQuakes;

    @override
    void initState() { 
      super.initState();
      _earthQuakes = Network.getQuakes();
      _earthQuakes.then((values)=>{
        print("Place: ${values.features[1].geometry.coordinates[0]}" )
      });
    }
// using .then method we can check the values received from the json

-> VVVVVImp  - Using the TypesHelper class convert the int and doubles and the nulls to 
appropriate types so that there won't be any unhandled exceptions 

=> go throught the networking and PODO lectures once, VVVVVImp
